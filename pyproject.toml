[build-system]
requires = ["maturin>=1.5.0,<2.0.0"]
build-backend = "maturin"

[project]
name = "cylindra"
description = "Spectral analysis, simulation and subtomogram averaging of heterogenic cylindrical structures"
keywords = ["gui", "napari", "cryo-ET", "tomography"]
readme = "README.md"
requires-python = ">=3.10"
classifiers = [
    "Programming Language :: Rust",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
license = { file = "LICENSE" }
dynamic = ["version"]
dependencies = [
    "impy-array>=2.4.1",
    "acryo>=0.4.7",
    "macro-kit>=0.4.6",
    "magicgui>=0.8.1",
    "magic-class>=0.7.10",
    "psygnal>=0.9.1",
    "superqt[iconify]>=0.6.1",
    "pydantic>=1.10.0",
    "pydantic-compat",
    "pyqtgraph>=0.12.4",
    "pyarrow>=11.0.0",
    "numpy>=1.23.0",
    "scipy>=1.11.3",
    "pandas>=1.5.0",
    "polars>=0.20.13",
    "scikit-image>=0.21.0",
    "napari>=0.4.18",
    "qtpy>=2.3.1",
    "qt-command-palette>=0.0.7",
    "matplotlib>=3.8.1",
    "rich>=13.6.0",
    "dask<2024",  # new dask has problem of lazy-loading images.
]
authors = [
    { email = "liuha@med.kobe-u.ac.jp" },
    { name = "Hanjin Liu" }
]

[project.optional-dependencies]
testing = [
    "pytest",
    "pytest-qt",
    "pytest-cov",
    "pyqt5",
    "scikit-learn>=1.2.2",
    "mrcfile>=1.3.0",
    "tifffile>=2023.2.28",
    "starfile",
    "imodmodel",
    "maturin>=1.5.0,<2.0.0",
]
all = [
    "pyqt5",
    "scikit-learn>=1.2.2",
    "mrcfile>=1.3.0",
    "tifffile>=2023.2.28",
    "starfile",
    "imodmodel",
]
docs = [
    "pyqt5",
    "mkdocs>=1.5.3",
    "mkdocs-autorefs>=0.5.0",
    "mkdocs-gen-files>=0.5.0",
    "mkdocs-material>=9.5.2",
    "mkdocs-material-extensions>=1.3.1",
    "mkdocstrings>=0.24.0",
    "mkdocstrings-python>=1.7.5",
    "maturin>=1.5.0,<2.0.0",
]

[project.scripts]
cylindra = "cylindra.__main__:main"

[tool.maturin]
include = ["**/*.pyi", "*.pyi", "**/*.svg", "**/*.yaml", "**/*.qss", "**/*.json"]
features = ["pyo3/extension-module"]
module-name = "cylindra._cylindra_ext"

[tool.setuptools]
include-package-data = true

[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = "-v"
filterwarnings = [
    "ignore::DeprecationWarning:qtpy",
    "ignore::DeprecationWarning:ipykernel",
    "ignore::DeprecationWarning:pkg_resources",
    "ignore:Deprecated call to `pkg_resources.declare_namespace:DeprecationWarning",
    "ignore::DeprecationWarning:qtconsole",
    "ignore:distutils Version classes are deprecated",
    "ignore:path is deprecated:DeprecationWarning",
    "ignore:Jupyter is migrating its paths to use standard platformdirs:DeprecationWarning",
]

[tool.coverage.run]
source_pkgs = ["cylindra"]
branch = true
parallel = true

[tool.coverage.paths]
cylindra = ["*/cylindra/cylindra"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "if TYPE_CHECKING:",
    'if __name__ == "__main__":',
    'if sys.platform == "darwin":',
    'def __repr__(self)',
    "@overload",
    "except ImportError",
    "except ImportError*",
    "except PackageNotFoundError",
    "raise NotImplementedError",
    "pass",
]


[tool.ruff]
target-version = "py310"
line-length = 88
select = [
  "A",
  "ARG",
  "B",
  "C",
  "E",
  "F",
  "I",
  "ICN",
  "ISC",
  "PLC",
  "PLE",
  "PLW",
  "Q",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
ignore = [
  "A001", "A002", "A003", "ARG001", "ARG002",
  # Allow non-abstract empty methods in abstract base classes
  "B027", "B904", "B006",
  "E501", "E741",
  # Ignore complexity
  "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
  "UP038", "RUF001", "PLC1901", "N814", "UP035",
  "T201", "PLW0603", "PLW2901",
]
